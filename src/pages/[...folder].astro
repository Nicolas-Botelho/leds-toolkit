---
import path from 'path';
import fs from 'fs';
import { headerData } from '~/navigation';
import FolderMenu from '~/components/FolderMenu.astro';
import Layout from '~/layouts/PageLayout.astro';
import type { NavLink } from '~/navigation'

const folderParam = Astro.params.folder || '';


let fullFolderPath = path.join('src/pages', folderParam);

if (!fs.existsSync(fullFolderPath) || !fs.statSync(fullFolderPath).isDirectory()) {
  throw new Error('Pasta nÃ£o encontrada');
}

// Breadcrumbs
const segments = folderParam.split('/').filter(Boolean);
const breadcrumbs = segments.map((segment, i) => ({
  text: segment,
  href: '/' + segments.slice(0, i + 1).join('/'),
}));

export function getStaticPaths() {

  // for (const link of headerData.links) {
  //   console.dir(link, {depth : 3})
  // }

  const paths: { params: { folder : string }}[] = [];

  function walkNavData(links: typeof headerData.links) {
    for (let link of links) {
      if (link.href) {
        paths.push({params: {folder: link.href}})
      }
      if (link.links) {
        walkNavData(link.links)
      }
    }
  }

  walkNavData(headerData.links)

  return paths
}

// export function getStaticPaths() {
//   return [
//     { params: {folder: 'andes' }},
//     { params: {folder: 'andes/new_documentation'}},
//     { params: {folder: 'code_wise' }},
//     { params: {folder: 'code_wise/code_wise_extension'}},
//     { params: {folder: 'code_wise/code_wise_extension/How was building'}},
//     { params: {folder: 'code_wise/code_wise_lib'}},
//     { params: {folder: 'made'}},
//     { params: {folder: 'made/advanced-topics' }},
//     { params: {folder: 'made/how_to_use' }},
//     { params: {folder: 'oraculo' }},
//     { params: {folder: 'oraculo/metrics' }},
//     { params: {folder: 'spark' }},
//     { params: {folder: 'spark/2_how_to_use' }},
//     { params: {folder: 'spark/2_how_to_use/2_file_examples' }},
//     { params: {folder: 'spark/4_spark_advanced' }},
//     { params: {folder: 'spark/4_spark_advanced/3_Architecture' }},
//     { params: {folder: 'spark/4_spark_advanced/3_Architecture/4_src_folder' }},
//     { params: {folder: 'spark/5_sparklib_advanced' }},
//     { params: {folder: 'spark/5_sparklib_advanced/4_backend' }},
//     { params: {folder: 'spark/5_sparklib_advanced/4_backend/4_generated_arch' }},
//     { params: {folder: 'spark/5_sparklib_advanced/5_frontend' }},
//     { params: {folder: 'spark/5_sparklib_advanced/5_frontend/3_generated_arch' }},
//     { params: {folder: 'spark/6_project_manegment' }},
//     { params: {folder: 'spark/6_project_manegment/future' }},
//     { params: {folder: 'spark/6_project_manegment/team_management' }},
//     { params: {folder: 'spark/6_project_manegment/team_management/Communication Plan' }},
//     { params: {folder: 'spark/6_project_manegment/team_management/DISC' }},
//     { params: {folder: 'spark/6_project_manegment/team_management/Team Topology' }},
//     { params: {folder: 'test_ai' }},
//     { params: {folder: 'todo_list'}},
//   ]
// }

function pathReducer(path: typeof breadcrumbs, data: NavLink[]): NavLink[] {

  let newPath = path[path.length - 1]

  let pathingList = newPath.href.split('/')
  pathingList.shift()

  let firstLink: NavLink | undefined

  for (let link of data) {
      let pathingListLink = link.href?.split('/') ?? []
      pathingListLink.shift()
      let linkHref = pathingListLink[0]

      if (linkHref == pathingList[0]) {
        pathingList.shift()
        firstLink = link
      }
  }

  console.log('start')
  console.log(pathingList)
  console.log(firstLink?.href)
  console.log('---')

  if (firstLink) {
    console.log('start_func')
    let link = linkFinder(pathingList, firstLink)
    return link?.links ?? [link]
  }
  return data
}

function linkFinder(pathList: string[], data: NavLink, index=2): NavLink {

  if (pathList.length != 0 && data.links) {
    // when the data.link match the path[0], pass that link as data in the recursion and the path.shift()
    for (let link of data.links) {

      let pathingListLink = link.href?.split('/') ?? []
      let linkHref = pathingListLink[index]

      console.log('iteration')
      console.log(pathList)
      console.log(pathingListLink)
      console.log(linkHref)
      console.log('---')

      if (linkHref == pathList[0]) {
        pathList.shift()

        console.log('found')
        console.log(pathList)
        console.log(pathingListLink)
        console.log(linkHref)
        console.log('---')

        return linkFinder(pathList, link, index+1)
      }
    }
  }
  // when the path is empty, return the data
  console.log('out')
  return data
}

const reducedData = pathReducer(breadcrumbs, headerData.links)

---

<Layout>
  <div>
    <nav>
      <a href="/">Home</a>
        {breadcrumbs.map(b => (
      <> / <a href={b.href}>{b.text}</a></>
      ))}
    </nav>
  </div>

  <section class="px-4 py-16 sm:px-6 mx-auto lg:px-8 lg:py-20 max-w-4xl">
    <div
      class="mx-auto prose prose-lg max-w-4xl dark:prose-invert dark:prose-headings:text-slate-300 prose-md prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg mt-8"
    >
      <slot>
        <FolderMenu links={reducedData} />
      </slot>
    </div>
  </section>

</Layout>